snippet pri "print inspect" w
print("${1:var}", $1)
endsnippet

snippet cl "class" w
class ${1:Name}(object):
	def __init__(self):
		pass
endsnippet

snippet sinit "self init" w
self.${1:var} = $1
endsnippet

snippet smet "self method" w
def ${1:funcName}(self$0):
endsnippet

snippet op== "__eq__" w
def __eq__(self, other):
	if type(self) != type(other):
		return False
	return self.__dict__ == other.__dict__

def __ne__(self, other):
	return not self.__eq__(other)
endsnippet

snippet op<= "__le__" w
@functools.total_ordering
def __le__(self, other):
endsnippet

snippet opstr "__str__" w
def __str__(self):
		return "".format()
def __repr__(self):
	return str(self)
endsnippet

snippet opit "__iter__" w
	def __iter__(self):
		def next(self):
			raise StopIteration
endsnippet

snippet rett "return True" w
return True
endsnippet

snippet retf "return False" w
return False
endsnippet

snippet main "main" w
if __name__ == "__main__":
endsnippet

snippet scriptdir "scriptdir" w
os.path.dirname(__file__)
endsnippet

snippet copyfile "copyfile" w
shutil.copyfile(${1:from}, ${2:to})
endsnippet

snippet args "args template" w
import argparse
arg_parser = argparse.ArgumentParser(description='', add_help=False)
arg_parser.add_argument('--help', action='help',
												help='Show help message')
arg_parser.add_argument('-n', '--dry-run', action='store_true',
												help='')
arg_parser.add_argument('-p', '--project', type=str, default='',
												help='')
arg_parser.add_argument('class_name', type=str, nargs='+',
												help='')
args = arg_parser.parse_args()
endsnippet

snippet static "static" w
@staticmethod
endsnippet
snippet logger "logger" w
import logging
logging.basicConfig(stream=sys.stdout)
logger = logging.getLogger(__name__)
endsnippet

snippet trace "traceback exception" w
import traceback
try:
except Exception as e:
	logger.error(traceback.format_exc())
endsnippet

snippet dbg "debug trace" w
import pdb
pdb.set_trace()
endsnippet

snippet utest "unit test" w
import unittest

class Test${1:Name}(unittest.TestCase):
	def setUp(self):
		pass

	def test_${2:CaseName}(self):
		self.assertEqual(True, True)

if __name__ == '__main__':
	unittest.main()
	# unittest.main(defaultTest="$1.$2")
endsnippet
