## STL Collections
# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet
# std::vector
snippet vec
std::vector<${1:T}> ${2}
endsnippet
# std::deque
snippet deque
std::deque<${1:T}> ${2};
endsnippet
# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet
# std::list
snippet list
std::list<${1:T}> ${2};
endsnippet
# std::set
snippet set
std::set<${1:T}> ${2};
endsnippet
# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::multiset
snippet mset
std::multiset<${1:T}> ${2};
endsnippet
# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet
# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet
# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::stack
snippet stack
std::stack<${1:T}> ${2};
endsnippet
# std::queue
snippet queue
std::queue<${1:T}> ${2};
endsnippet
# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet
# std::pair
snippet pair
std::pair< ${1:T}, ${2:T}>${3}
endsnippet
##
## Access Modifiers
# private
snippet pri
private
endsnippet
# protected
snippet pro
protected
endsnippet
# public
snippet pub
public
endsnippet
# friend
snippet fr
friend
endsnippet
# mutable
snippet mu
mutable
endsnippet
##
## Class
# New class def
snippet ncl
#pragma once

class ${1:`!v expand("%:t:r")`}
{
public:
	$1(${2});
	~$1();

private:
	${0:/* data */}
};
endsnippet
# member function implementation
snippet mf
${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3})
{
	${0}
}
endsnippet
# namespace
snippet ns
namespace ${1:`vim_snippets#Filename('', 'my')`} {
	${0}
} /* namespace $1 */
endsnippet
##
## Input/Output
# std::cout
snippet cout
std::cout << ${1} << std::endl;
endsnippet
# std::cin
snippet cin
std::cin >> ${1};
endsnippet
##
## Iteration
# for i
snippet fori
for( int ${2:i} = 0; $2 < ${1:count}; ${3:++}$2 ){
	${4}
}

endsnippet
# foreach
snippet fore
for( ${1:auto} ${2:i} : ${3:container} ){
	${4}
}
endsnippet
# iterator
snippet iter
for( ${1:std::vector}<${2:type}>::${3:const_iterator} ${4:it} = ${5:container}.begin(); $4 != $5.end(); ++$4 ){
	${6}
}

endsnippet
# auto iterator
snippet ita
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet
##
## Lambdas
# lamda (one line)
snippet ld
[${1}](${2}){${3}}
endsnippet
# lambda (multi-line)
snippet lld
[${1}](${2}){
	${3}
}
endsnippet
# #include
snippet inb
#include <${1}>
snippet inq
#include "${1}"
endsnippet
# Ctor and Dtor init
snippet ncd
#include "$1.h"

${1:`vim_snippets#Filename('$1', 'name')`}::$1(${2})
{
}

$1::~$1(${3})
{
}
endsnippet
# #pragma once
snippet prago
#pragma once
endsnippet
# Types
# unsigned int
snippet uint
unsigned int
endsnippet
# STD types
# string
snippet str
std::string
endsnippet
# endl
snippet endl
std::endl
endsnippet
# ofstream
snippet ofs
std::ofstream
endsnippet
# stringstream
snippet ss
std::stringstream
endsnippet
# Casts
# dynamic cast
snippet dcast
dynamic_cast<${1:T}>(${2})${3}
endsnippet
# static cast
snippet scast
static_cast<${1:T}>(${2})${3}
endsnippet
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

# vim:ft=snippets:
