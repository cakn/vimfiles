## STL Collections
# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet
# std::vector
snippet vec
std::vector<${1:T}> ${2}
endsnippet
# std::deque
snippet deque
std::deque<${1:T}> ${2};
endsnippet
# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet
# std::list
snippet list
std::list<${1:T}> ${2};
endsnippet
# std::set
snippet set
std::set<${1:T}> ${2};
endsnippet
# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::multiset
snippet mset
std::multiset<${1:T}> ${2};
endsnippet
# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet
# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet
# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::stack
snippet stack
std::stack<${1:T}> ${2};
endsnippet
# std::queue
snippet queue
std::queue<${1:T}> ${2};
endsnippet
# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet
# std::pair
snippet pair
std::pair< ${1:T}, ${2:T}>${3}
endsnippet
##
## Access Modifiers
# private
snippet pri
private
endsnippet
# protected
snippet pro
protected
endsnippet
# public
snippet pub
public
endsnippet
# friend
snippet fr
friend
endsnippet
# mutable
snippet mu
mutable
endsnippet
##
## Class
# New class def
snippet ncl
#pragma once

class ${1:`!v expand("%:t:r")`}
{
public:
	$1(${2});
	~$1();

private:
	${0:/* data */}
};
endsnippet
# member function implementation
snippet mf
${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3})
{
	${0}
}
endsnippet
# namespace
snippet nsp
namespace ${1:`vim_snippets#Filename('', 'my')`} {
	${0}
} // namespace $1
endsnippet
##
## Input/Output
# std::cout
snippet cout
std::cout << ${1} << std::endl;
endsnippet
# std::cin
snippet cin
std::cin >> ${1};
endsnippet
##
## Iteration
# for i
snippet for
for (int ${2:i} = 0; $2 < ${1:count}; ++$2) {
	$0
}

endsnippet
# foreach
snippet fora
for (const auto& ${2:item} : ${3:container}){
	$0
}
endsnippet
# iterator
snippet fori
for (auto ${2:it} = ${1:container}.begin(); $2 != $1.end(); ++$2 ){
	$0
}
endsnippet
##
## Lambdas
# lamda (one line)
snippet ld
[${1}](${2}){
	${3}
}
endsnippet
# lambda (multi-line)
snippet lld
[${1}](${2}){${3}}
endsnippet

# #include
pre_expand "del snip.buffer[snip.line]; line = (i for i,v in enumerate(snip.buffer) if not (v.startswith('#include <') or v.startswith('#pragma'))).next(); snip.buffer[line:line] = ['']; snip.cursor.set(line, 0)"
snippet inb
#include <${1}>
endsnippet
pre_expand "del snip.buffer[snip.line]; line = (i for i,v in enumerate(snip.buffer) if not (v.startswith('#include "') or v.startswith('#pragma'))).next(); snip.buffer[line:line] = ['']; snip.cursor.set(line, 0)"
snippet inq
#include "${1}"
endsnippet

# #pragma once
pre_expand "del snip.buffer[snip.line]; snip.buffer[0:0] = [''];snip.cursor.set(0,0)"
snippet prago
#pragma once
endsnippet

# Types
# unsigned int
snippet uint
unsigned int
endsnippet
# STD types
# string
snippet str
std::string
endsnippet
# endl
snippet endl
std::endl
endsnippet
# ofstream
snippet ofs
std::ofstream
endsnippet
# stringstream
snippet ss
std::stringstream
endsnippet

# Casts
# dynamic cast
snippet dcast
dynamic_cast<${1:T}>(${2})${3}
endsnippet
# static cast
snippet scast
static_cast<${1:T}>(${2})${3}
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet if
if (${1:cond}) {
	$0
}
endsnippet

pre_expand "snip.buffer[snip.line] = ' '*(snip.column - 5); snip.cursor.set(snip.line, snip.column - 5)"
snippet else
} else {
	$0
endsnippet
# `!p snip.shift(2);snip.rv = snip.mkline("} else {", None)`

# vim:ft=snippets:
